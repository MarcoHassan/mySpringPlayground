plugins {

    // Spring Plug-ins //
    id 'org.springframework.boot' version '2.4.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    
    id 'java'
    // id 'war'
    
    // Microsoft Webapp Plug-in - can deploy directly to webapp via that plug-in //
    id "com.microsoft.azure.azurewebapp" version "1.2.0"
    
    // Lombok Plug In - Gradle has to understand the Annotations as well when compiling the project //
    // id "io.freefair.lombok" version "6.4.2"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {    
    
    ////////////////////////
    // Spring Boot Set Up //
    ////////////////////////
    
    // spring - starter MVC //
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'	    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Say that tomcat is provided. Should not be packaged there.
    // providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
     
    // Spring - WebFlux - Asynchronous Backend //
    
    // it's an either or between this and MVC. include the right starter depending on the runtime 
    // you want to develop on. 
    // Not that important so far as in either case you can not work in a reactive way with relational DBs yet.
    // implementation 'org.springframework.boot:spring-boot-starter-webflux'
    
    // Hateoas - for programmatically shipping endpoints //
    
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    

    ////////////////////////////////////////
    // Spring DevTool - Automatic Restart //
    ////////////////////////////////////////
    
    implementation 'org.springframework.boot:spring-boot-devtools'
    
    ////////////////////////
    // System Environment //
    ////////////////////////
    
    // Dot-env Library
    
    // Can use it but then have to use a different solution. 
    // Probably something similar to the one of Markus - i.e. store such an .env to Blob and then read from there
    // there everything should be more less integrated and do not need the connection as here.
    
    implementation 'io.github.cdimascio:java-dotenv:3.0.0'
    
    ////////////
    // Lombok //
    ////////////

    // Check at the plug in and understand if you can work through it instead of this. 
    // Keep moving for now.

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    implementation 'org.projectlombok:lombok'

    /////////////////////
    // Azure Libraries // 
    /////////////////////

    /** Config Section */ 

    // This is a nice library Valerio pointed you to
    // the basic idea is that on their website https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/boms/azure-sdk-bom/README.md
    // you find the spring version compatible version library.
    // then when applying this one you should not specify versions for the azure sdk
    // bom will select the relevant version that is compatible with that Spring release
    implementation platform('com.azure:azure-sdk-bom:1.0.1')

    /** Auth.   Section */

    // For managing authentication in the cloud
    implementation 'com.azure:azure-identity'	

    /** Storage Section */ 

    // Blob
    implementation 'com.azure:azure-storage-blob' 

    /** Event   Section */ 

    // Eventgrid
    // implementation 'com.azure:azure-messaging-eventgrid:4.10.0'

    /** Streaming Section */ 

    // Spring - Reactor
    implementation 'io.projectreactor:reactor-core' 

    // For testing reactor steps
    testImplementation 'io.projectreactor:reactor-test'

    ////////////////////////////////////////////////////////
    // For proper API documentation - OpenApi and Swagger //
    ////////////////////////////////////////////////////////

    // Swagger Annotations and Doc via OpenApi-ui //
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.4'
    implementation 'io.swagger:swagger-annotations:1.6.4'
    
    // With the above you can find the endpoints at: http://localhost:8080/v3/api-docs/
    // you can change the endpoint for it in your spring configuraitons application.yml file
    
    // http://localhost:8080/swagger-ui/index.html - you will find a page with your APIs here.
    // can change as well in your application config file.
    
    	
}

test {
	useJUnitPlatform()
}


////////////////////////////////
// Deploying on Azure Webapps //
////////////////////////////////

// Important - Note that at some you will have to make order and decide what goes in here and what does not.
// Meaning what you manage through DevOps pipelines and what you do not. 
azurewebapp {
    subscription = '2b136b02-de43-446b-b3cb-e47b93f819f0'
    resourceGroup = 'rg-marco'
    appName = 'jellyfish-marcoHassApp'
    pricingTier = 'B1'
    region = 'westeurope'
    runtime {
      os = 'Linux'
      webContainer = 'Java SE'    // or 'Java SE' if you want to run an executable jar
                                  // stay with Tomcat as this is the server of choice to this stage.
      javaVersion = 'Java 11'
    }
//    appSettings {
//        <key> = <value>
//    }
    auth {
        type = 'azure_cli' // support azure_cli, oauth2, device_code and service_principal
    }
}

